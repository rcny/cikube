#!/usr/bin/env ruby

require 'optparse'
require 'fileutils'

options = {}
OptionParser.new do |opts|
  opts.on('--role ROLE', String, 'The role of the node') do |role|
    options[:role] = role
  end
  opts.on("--opts OPTIONS", String, "Additional node's K3s options") do |opts_param|
    options[:opts] = opts_param
  end
  opts.on('--token TOKEN', String, 'The token value to be written into the token file') do |token|
    options[:token] = token
  end
  opts.on('--provider PROVIDER', String, 'The target cloud provider') do |provider|
    options[:provider] = provider
  end
  opts.on('--config-destination BUCKET', String, "The object storage entity name for storing admin's kubeconfig") do |bucket|
    options[:bucket] = bucket
  end
end.parse!

if options[:token].nil?
  puts "The --token flag is mandatory. Please provide a token value."
  exit 1
end

if options[:provider].nil?
  puts "The --provider flag is mandatory. Please specify the cloud provider."
  exit 1
end

if options[:role] == 'server' && options[:provider] == 'google' && options[:bucket].nil?
  puts "The --config-destination flag is required for server role with Google provider. Please provide a GCS bucket name."
  exit 1
end

def write_options_file(role, opts)
  config_dir = '/etc/cikube/k3s'
  file_path = case role
              when 'server'
                "#{config_dir}/server.opts"
              when 'agent'
                "#{config_dir}/agent.opts"
              end

  if File.exist?(file_path) && File.read(file_path).start_with?('CIKUBE_K3S_OPTS="--')
    puts "K3s options for #{File.basename(file_path)} were already explicitly defined"
    exit 1
  end

  File.open(file_path, 'w') do |file|
    file.write("CIKUBE_K3S_OPTS=\"#{opts}\"\n")
  end
end

def write_token_file(token)
  token_file = '/etc/cikube/k3s/token'
  File.open(token_file, 'w') do |file|
    file.write(token)
  end
end

def enable_and_start_service(service_name)
  5.times do
    success = system("systemctl enable --now #{service_name}")
    if success
      status = `systemctl is-active #{service_name}`.strip
      return if status == 'active'
      sleep 5
    else
      puts "Failed to enable and start #{service_name}"
    end
  end
  puts "Failed to start #{service_name} after multiple attempts"
  exit 1
end

def mask_service(service_name)
  system("systemctl mask #{service_name}")
end

def wait_for_k3s_ready
  30.times do
    success = system("k3s kubectl get nodes")
    return if success
    sleep 5
  end
  puts "Timed out waiting for K3s to be ready"
  exit 1
end

def copy_kubeconfig_to_gcs(bucket)
  kubeconfig_path = '/etc/rancher/k3s/k3s.yaml'
  if File.exist?(kubeconfig_path)
    system("gsutil cp #{kubeconfig_path} gs://#{bucket}/root_kubeconfig.yaml")
  else
    puts "Kubeconfig file not found at #{kubeconfig_path}"
    exit 1
  end
end

write_token_file(options[:token])

case options[:role]
when 'server'
  write_options_file('server', options[:opts]) if options[:opts]
  enable_and_start_service('cikube-k3s-server.service')
  mask_service('cikube-k3s-agent.service')
  wait_for_k3s_ready
  copy_kubeconfig_to_gcs(options[:bucket]) if options[:provider] == 'google'
  puts "Server node initialized"
when 'agent'
  write_options_file('agent', options[:opts]) if options[:opts]
  enable_and_start_service('cikube-k3s-agent.service')
  mask_service('cikube-k3s-server.service')
  puts "Agent node initialized"
else
  puts "Invalid role specified. Please use '--role server' or '--role agent'."
  exit 1
end
